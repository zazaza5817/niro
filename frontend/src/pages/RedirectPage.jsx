import { useEffect, useState } from 'react'
import { useLocation } from 'react-router-dom'
import './RedirectPage.css'

function RedirectPage() {
  const location = useLocation()
  const [status, setStatus] = useState('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...')
  const [error, setError] = useState(null)
  const [configUrl, setConfigUrl] = useState(null)
  const [deviceType, setDeviceType] = useState('')
  const [deepLinkUrl, setDeepLinkUrl] = useState('')
  const [isReady, setIsReady] = useState(false)
  
  useEffect(() => {
    const searchParams = new URLSearchParams(location.search)
    const url = searchParams.get('config_url')
    
    if (url) {
      setConfigUrl(url)
      setStatus('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...')
      
      setTimeout(() => {
        const userAgent = window.navigator.userAgent
        let externalUrl
        let device = ''
        
        if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
          externalUrl = `v2raytun://import/${url}`
          device = 'iOS'
        } else if (/android/i.test(userAgent)) {
          externalUrl = `hiddify://import/${url}`
          device = 'Android'
        } else if (/Win/i.test(userAgent) || /Windows NT/i.test(userAgent)) {
          externalUrl = `hiddify://import/${url}`
          device = 'Windows'
        } else if (/Mac/.test(userAgent)) {
          externalUrl = `v2raytun://import/${url}`
          device = 'macOS'
        } else {
          // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –û–° (–Ω–∞–ø—Ä–∏–º–µ—Ä, Linux) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
          device = '–í–∞—à–µ–π –û–°'
        }
        
        setDeviceType(device)
        setDeepLinkUrl(externalUrl)
        setStatus(`–ì–æ—Ç–æ–≤–æ –¥–ª—è ${device}`)
        setIsReady(true)
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å deep link —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
        if (externalUrl && (device === 'iOS' || device === 'Android' || device === 'macOS' || device === 'Windows')) {
          setTimeout(() => {
            openDeepLink(externalUrl, device)
          }, 1000)
        }
      }, 500)
    } else {
      setError('URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω')
    }
  }, [location])
  
  const openDeepLink = (url, device) => {
    setStatus(`–û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ${device}...`)
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ window.location.href (–∫–∞–∫ –≤ –≤–∞—à–µ–º —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
    try {
      window.location.href = url
      
      setTimeout(() => {
        setStatus('–ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–∫—Ä—ã–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
      }, 3000)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ deep link:', error)
      setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è')
    }
  }
  
  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(configUrl)
      setStatus('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!')
      setTimeout(() => {
        setStatus(`–ì–æ—Ç–æ–≤–æ –¥–ª—è ${deviceType}`)
      }, 2000)
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err)
      setStatus('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É')
      setTimeout(() => {
        setStatus(`–ì–æ—Ç–æ–≤–æ –¥–ª—è ${deviceType}`)
      }, 2000)
    }
  }
  
  return (
    <div className="redirect-container">
      <div className="redirect-gradient-overlay"></div>
      
      <div className="redirect-card">
        <img src="/icons/envelope.svg" className="redirect-logo" alt="VPN Config" />
        
        <h1 className="redirect-title">–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN</h1>
        
        {error ? (
          <div className="redirect-error">
            {error}
          </div>
        ) : (
          <>
            
            <div className="redirect-status">
              {status}
              {!isReady && !error && <span className="redirect-loading"></span>}
            </div>
            
            {isReady && (
              <div className="redirect-buttons-container">
                {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º */}
                {deepLinkUrl && (
                  <button 
                    onClick={() => openDeepLink(deepLinkUrl, deviceType)}
                    className="redirect-primary-button"
                  >
                    üöÄ –û—Ç–∫—Ä—ã—Ç—å VPN –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                  </button>
                )}
                
                {/* –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –û–° */}
                {!deepLinkUrl && (
                  <button 
                    onClick={copyToClipboard}
                    className="redirect-copy-button"
                  >
                    üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                  </button>
                )}
              </div>
            )}
          </>
        )}
      </div>
    </div>
  )
}

export default RedirectPage