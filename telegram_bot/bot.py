import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='logs/bot.log',
    filemode='a'
)

import telebot # type: ignore
import uuid
import datetime
from adduser import add_client, update_user
from datetime import datetime, timedelta
import jwt # type: ignore
import psycopg2 # type: ignore
from telebot import types # type: ignore
import os
import json
import requests # type: ignore

SECRET_KEY = os.environ.get('JWT_SECRET_KEY')
connect_str = os.environ.get('DATABASE_URL')
tg_token = os.environ.get('TG_TOKEN')
API_BASE_URL = os.environ.get('API_BASE_URL', 'http://backend:8000')
INTERNAL_API_KEY = os.environ.get('INTERNAL_API_KEY', 'default_internal_key_change_me')


with open('/app/data/plans.json', 'r') as file:
    plans_invoice = json.load(file)
    logging.info(plans_invoice)


def apply_referral_code_sync(user_tg_id, referral_code):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ —á–µ—Ä–µ–∑ API"""
    try:
        logging.info(f"Applying referral code {referral_code} for user {user_tg_id}")
        logging.info(f"{API_BASE_URL}/api/referrals/apply_referral")
        response = requests.post(f"{API_BASE_URL}/api/referrals/apply_referral", 
                               json={"user_tg_id": user_tg_id, "referral_code": referral_code},
                               headers={"X-Internal-API-Key": INTERNAL_API_KEY},
                               timeout=10)
        if response.status_code == 200:
            result = response.json()
            return result.get('success', False)
        return False
    except Exception as e:
        logging.error(f"Error applying referral code: {e}")
        return False


def get_plan_data_sync(user_tg_id, payload):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –ò—â–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
        with psycopg2.connect(connect_str) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT rp.duration, rp.title, rp.description, rp.price 
                FROM referral_plans rp 
                JOIN referral_usage ru ON rp.referral_code_id = ru.referral_code_id 
                WHERE ru.user_tg_id = %s AND rp.payload = %s
            """, (user_tg_id, payload))
            
            result = cursor.fetchone()
            if result:
                logging.info(f"Found referral plan for user {user_tg_id}, payload {payload}")
                return {
                    'duration': result[0],
                    'title': result[1],
                    'description': result[2],
                    'price': result[3]
                }
        
        # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        plan = plans_invoice.get(payload)
        if plan:
            logging.info(f"Using default plan for user {user_tg_id}, payload {payload}")
            return plan
        else:
            logging.error(f"Plan not found for payload {payload}")
            return None
            
    except Exception as e:
        logging.error(f"Error getting plan data: {e}")


bot = telebot.TeleBot(tg_token)


def generate_conf(message, plan):
    email = str(uuid.uuid4())
    client_id = str(uuid.uuid4())
    user_id = message.from_user.id
    logging.info("email generated")
    status_code, response_text, connection_url, server_id = add_client(email, client_id, 0, plan['duration'])
    if status_code != 200:
        print(-4516170921, f"(generate conf)max retries on {message.chat.id} {response_text}")
        print(message.chat.id, f"–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        logging.error("MAX RETRIES")
        return
    logging.info("CONFIGURATION CREATED")
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    token_data = {
        'user_id': user_id,
        'email': email
    }
    jwt_token = jwt.encode(token_data, SECRET_KEY, algorithm='HS256')
    logging.info("jwt created")

    with psycopg2.connect(connect_str) as conn:
        cursor = conn.cursor()
        current_datetime = datetime.now()
        expiry_datetime = current_datetime + timedelta(days=plan['duration'])
        expiry_datetime_str = expiry_datetime.strftime('%Y-%m-%d %H:%M')
        cursor.execute('''
            INSERT INTO users (tg_id, status, expiry, connection_link, email, id, server_id, jwt_token)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        ''', (user_id, 'active', expiry_datetime_str, connection_url, email, client_id, server_id, jwt_token))
        conn.commit()
        bot.send_message(-4516170921, f"(generate conf) new conf created for @{message.from_user.username}")
        logging.info("db updated")

def generate_conf_for_existing_user(message, plan, user_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å)"""
    email = str(uuid.uuid4())
    client_id = str(uuid.uuid4())
    logging.info(f"Generating configuration for existing user {user_id}")
    status_code, response_text, connection_url, server_id = add_client(email, client_id, 0, plan['duration'])
    if status_code != 200:
        bot.send_message(-4516170921, f"(generate conf for existing)max retries on {message.chat.id} {response_text}")
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É")
        logging.error("MAX RETRIES for existing user")
        return
    logging.info("CONFIGURATION CREATED for existing user")
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    token_data = {
        'user_id': user_id,
        'email': email
    }
    jwt_token = jwt.encode(token_data, SECRET_KEY, algorithm='HS256')
    logging.info("jwt created for existing user")

    with psycopg2.connect(connect_str) as conn:
        cursor = conn.cursor()
        current_datetime = datetime.now()
        expiry_datetime = current_datetime + timedelta(days=plan['duration'])
        expiry_datetime_str = expiry_datetime.strftime('%Y-%m-%d %H:%M')
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ
        cursor.execute('''
            UPDATE users 
            SET status = %s, expiry = %s, connection_link = %s, email = %s, id = %s, server_id = %s, jwt_token = %s
            WHERE tg_id = %s
        ''', ('active', expiry_datetime_str, connection_url, email, client_id, server_id, jwt_token, user_id))
        conn.commit()
        bot.send_message(-4516170921, f"(generate conf for existing) conf updated for @{message.from_user.username}")
        logging.info("db updated for existing user")

def set_expiry(message, new_expiry):
    new_expiry_str = new_expiry.strftime('%Y-%m-%d %H:%M')
    new_expiry_time = int(new_expiry.timestamp() * 1000)
    user_id = message.from_user.id
    with psycopg2.connect(connect_str) as conn:
            cursor = conn.cursor()

            cursor.execute("SELECT email, id, server_id FROM users WHERE tg_id = %s", (user_id,))
            res = cursor.fetchone()
            update_user(res[1], res[0], new_expiry_time, res[2])

            cursor.execute("UPDATE users SET expiry = %s WHERE tg_id = %s", (new_expiry_str, user_id))
            conn.commit()

@bot.message_handler(commands=['start'])
def start_message(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –≤ –∫–æ–º–∞–Ω–¥–µ
    args = message.text.split()
    if len(args) > 1:
        referral_code = args[1]
        user_tg_id = message.from_user.id
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        try:
            is_applied = apply_referral_code_sync(user_tg_id, referral_code)
            if is_applied:
                bot.send_message(message.chat.id, 
                               f"üéâ –ö–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n")
                logging.info(f"Applied referral code {referral_code} for user {user_tg_id}")
            else:
                bot.send_message(message.chat.id, 
                               "‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n\n")
                logging.warning(f"Failed to apply referral code {referral_code} for user {user_tg_id}")
        except Exception as e:
            logging.error(f"Error processing referral code: {e}")
    
    markup = types.InlineKeyboardMarkup()
    web_app_info = types.WebAppInfo("https://nirovpn.com")
    miniapp_button = types.InlineKeyboardButton(text="niro vpn", web_app=web_app_info)
    markup.add(miniapp_button)
    bot.send_message(message.chat.id,
                    "üöÄ–ù–∞—à —Å–µ—Ä–≤–∏—Å –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä–æ–µ, –Ω–∞–¥–µ–∂–Ω–æ–µ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, "
                    "—á—Ç–æ *–Ω–∏–∫–∞–∫–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è* –∏ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è.\n\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ "
                    "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ VPN –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª–∏–∫–æ–≤.\n‚úÖ –ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å –∏ –æ–±–µ—Å–ø–µ—á—å—Ç–µ "
                    "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤ —Å–µ—Ç–∏.\n‚úÖ –ù–∞—à —Å–µ—Ä–≤–∏—Å –∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–ª–µ–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É "
                    "–Ω–∞ –ª—é–±–æ–º —Å–≤–æ–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n‚úÖ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω—É–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.\n\nüìã "
                    "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /info", parse_mode="markdown", reply_markup=markup)


@bot.message_handler(commands=['info'])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    web_app_info = types.WebAppInfo("https://nirovpn.com")
    miniapp_button = types.InlineKeyboardButton(text="niro vpn", web_app=web_app_info)
    markup.add(miniapp_button)

    bot.send_message(message.chat.id, "üîí–ù–∞—à —Å–µ—Ä–≤–∏—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª VLESS, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –≤—ã—Å–æ–∫—É—é —Å—Ç–µ–ø–µ–Ω—å "
                                      "—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Ç—Ä–∞—Ñ–∏–∫–∞. –≠—Ç–æ –¥–µ–ª–∞–µ—Ç –µ–≥–æ –Ω–∞–¥–µ–∂–Ω—ã–º –∏ "
                                      "–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –†–æ—Å—Å–∏–∏.\nüìç –ë—ã—Å—Ç—Ä—ã–π —Å–µ—Ä–≤–µ—Ä "
                                      "—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. –ë–ª–∞–≥–æ–¥–∞—Ä—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ, "
                                      "–≤–∞—à–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –∏ –±—ã—Å—Ç—Ä—ã–º.\nüîß –ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π "
                                      "–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å—Ç –∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ–≥–æ "
                                      "–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
                                      "üë©‚Äçüíª–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å.", reply_markup=markup)


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    payload = pre_checkout_query.invoice_payload
    user_tg_id = pre_checkout_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
    plan_data = get_plan_data_sync(user_tg_id, payload)
    
    if plan_data:
        plan_price = plan_data.get('price', 0)
        try:
            if pre_checkout_query.total_amount == plan_price:
                bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
                logging.info(f"payment precheck ok (fallback)! {plan_price}")
            else:
                bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False, 
                                              error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞.")
                logging.info(f"err payment amount (fallback) {pre_checkout_query.total_amount}, but needed {plan_price}")
        except Exception as e:
            logging.error(f"Error checking price info for user {user_tg_id}: {e}")

    else:
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                      error_message="–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã.")
        logging.info(f"payment err - plan not found for payload {payload}")



@bot.message_handler(content_types=['successful_payment'])
def handle_payment(message):
    try:
        payload = message.successful_payment.invoice_payload
        bot.send_message(-4516170921, f"new payment from @{message.from_user.username} ({message.from_user.id})")
        
        user_id = message.from_user.id
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ)
        plan = get_plan_data_sync(user_id, payload)
        
        if not plan:
            bot.send_message(-4516170921, f"–Ω–µ –Ω–∞—à–µ–ª—Å—è –ø–ª–∞–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —É–∂–µ @{message.from_user.username} ({message.from_user.id})")

            logging.error(f"Could not get plan data for payload {payload}")
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        
        with psycopg2.connect(connect_str) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT status, expiry, server_id FROM users WHERE tg_id = %s", (user_id,))
            res = cursor.fetchone()
        
        if not res:
            logging.info("New user - creating configuration")
            generate_conf(message, plan)
            bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è vpn –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return
        
        user_status = res[0]
        user_expiry = res[1]
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º inactive (—Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É)
        if user_status == "inactive" or user_expiry is None:
            logging.info(f"User {user_id} is inactive - creating first configuration")
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            generate_conf_for_existing_user(message, plan, user_id)
            bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è vpn –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            return
            
        # –î–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö/–∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
        expiry_datetime = datetime.strptime(user_expiry, '%Y-%m-%d %H:%M')
        current_datetime = datetime.now()
        time_left = expiry_datetime - current_datetime
        
        if time_left.total_seconds() <= 0:
            logging.info(f"User {user_id} subscription expired - recreating configuration")
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            generate_conf_for_existing_user(message, plan, user_id)
            bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è vpn –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
            logging.info("Renew subscription")
        else:
            logging.info(f"User {user_id} extending existing subscription")
            new_expiry = expiry_datetime + timedelta(days=plan['duration'])
            set_expiry(message, new_expiry)
            bot.send_message(message.chat.id, f"–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞!")
            logging.info("just add time")
    except:
        logging.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã!")
        bot.send_message(-4516170921, f"payment process error @{message.from_user.username} ({message.from_user.id})")


while True:
    print("starting")
    logging.info("starting")
    try:
        bot.polling()
    except:
        logging.exception("–æ—à–∏–±–∫–∞ bot.polling")